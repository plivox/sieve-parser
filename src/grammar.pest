//
// Pest modifiers:
//   _ -> Silent (no token pairs, no error reporting)
//   @ -> Atomic (No whitespace, cascading)
//   $ -> Compound atomic (Like atomic but not cascading)
//   ! -> Non-atomic (Stop cascading of atomics)
//

// ctl -> control
// act -> action
// tst -> test

sieve = _{ SOI ~ action* ~ EOI }

action = _{
    ctl_require   |
    ctl_condition |
    ctl_stop      |
    act_fileinto  |
    act_redirect  |
    act_keep      |
    act_discard   |
    act_vacation  |
    act_reject    |
    act_notify    |
    act_flag
}

///
/// [Comments](https://datatracker.ietf.org/doc/html/rfc5228#section-2.3)
///
COMMENT = { hash_comment | bracketed_comment }

hash_comment = @{ hashtag ~ (!newline ~ ANY)* }

bracketed_comment = @{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

///
/// [Strings](https://datatracker.ietf.org/doc/html/rfc5228#section-2.4.2)
///

string = ${ double_quote ~ inner_str ~ double_quote }

multi_line_string = @{
    "text:" ~ newline? ~ multi_line_string_content ~ "\n.\n"
}

// multi_line_string_start = {
// "text:"
// }

multi_line_string_content = ${
    (!"\n.\n" ~ ANY)*
}

///
/// [Arguments](https://datatracker.ietf.org/doc/html/rfc5228#section-2.6)
///

//
// arguments??
//
// :domain (string)
// :localpart (string)
// :matches (string)
// :list
//
// parameter?
// :copy
// :all
//

// arguments = { (tagged_arg_with_value)* }

// tagged_args = _{
//     colon ~ tagged_arg_name
// }

// tagged_arg_name = { alpha+ }

// tagged_arg_with_value = {
//     colon ~ tagged_arg_name ~ tagged_arg_value?
// }

// tagged_arg_value = { (string | array) }

///
/// [Comparators](https://datatracker.ietf.org/doc/html/rfc5228#section-2.7.3)
///

comparators = {
    colon ~ "is"       |
    colon ~ "matches"  |
    colon ~ "contains" |
    colon ~ "count"    | //
    colon ~ "regex"      // REGEX-01 (draft-ietf-sieve-regex-01)
}

///
/// [Control](https://datatracker.ietf.org/doc/html/rfc5228#section-4)
///

ctl_condition = _{
    ctl_condition_if ~
    ctl_condition_elsif* ~
    ctl_condition_else?
}

ctl_condition_if = {
    "if" ~ test ~ opening_brace ~ action* ~ closing_brace
}

ctl_condition_elsif = {
    "elsif" ~ test ~ opening_brace ~ action* ~ closing_brace
}

ctl_condition_else = {
    "else" ~ opening_brace ~ action* ~ closing_brace
}

ctl_require = { "require" ~ (string | array) ~ semicolon }

ctl_stop = { "stop" ~ semicolon }

///
/// [Action](https://datatracker.ietf.org/doc/html/rfc5228#section-4)
///

act_fileinto = {
    "fileinto" ~ act_fileinto_args? ~ act_fileinto_mailbox ~ semicolon
}

act_fileinto_args = _{
    act_fileinto_arg_copy   |
    act_fileinto_arg_create |
    act_fileinto_arg_flags
}

act_fileinto_arg_copy = { colon ~ "copy" } // RFC 3894

act_fileinto_arg_create = { colon ~ "create" } // RFC 5490

act_fileinto_arg_flags = { colon ~ "flags" ~ (string | array) } // RFC 5232

act_fileinto_mailbox = { string }

act_redirect = { "redirect" ~ string ~ semicolon }

act_keep = { "keep" ~ act_keep_args? ~ semicolon }

act_keep_args = { act_keep_arg_flags }

act_keep_arg_flags = { colon ~ "flags" ~ (string | array) } // RFC 5232

act_discard = { "discard" ~ semicolon }

///
/// [Action:Vacation](https://datatracker.ietf.org/doc/rfc5230/)
///

act_vacation = {
    "vacation" ~ act_vacation_args* ~ act_vacation_reason ~ semicolon
}

act_vacation_args = _{
    act_vacation_arg_days      |
    act_vacation_arg_subject   |
    act_vacation_arg_from      |
    act_vacation_arg_addresses |
    act_vacation_arg_mime      |
    act_vacation_arg_handle
}

act_vacation_arg_days = { colon ~ "days" ~ number }

act_vacation_arg_subject = { colon ~ "subject" ~ string }

act_vacation_arg_from = { colon ~ "from" ~ string }

act_vacation_arg_addresses = { colon ~ "addresses" ~ (string | array) }

act_vacation_arg_mime = { colon ~ "mime" }

act_vacation_arg_handle = { colon ~ "handle" ~ string }

act_vacation_reason = { string | multi_line_string }

///
/// [Action:Reject](https://datatracker.ietf.org/doc/html/rfc5429)
///

act_reject = { act_reject_or_ereject ~ act_reject_reason ~ semicolon }

act_reject_or_ereject = { ("reject" | "ereject") }

act_reject_reason = { string | multi_line_string }

///
/// [Action:Notify](https://datatracker.ietf.org/doc/html/rfc5435)
///

act_notify = { "notify" ~ act_notify_args* ~ act_notify_method? ~ semicolon }

act_notify_args = _{
    act_notify_arg_from       |
    act_notify_arg_importance |
    act_notify_arg_options    |
    act_notify_arg_message    |
    act_notify_arg_method
}

act_notify_arg_from = { colon ~ "from" ~ string }

act_notify_arg_importance = { colon ~ "importance" ~ string }

act_notify_arg_options = { colon ~ "options" ~ (string | array) }

act_notify_arg_message = { colon ~ "message" ~ string }

act_notify_arg_method = { colon ~ "method" ~ string }

act_notify_method = { string | multi_line_string }

///
/// [Action:Imap4flags](https://datatracker.ietf.org/doc/html/rfc5232)
///

act_flag = _{ act_flag_set | act_flag_add | act_flag_remove }

act_flag_set = { "setflag" ~ act_flag_args ~ semicolon }

act_flag_add = { "addflag" ~ act_flag_args ~ semicolon }

act_flag_remove = { "removeflag" ~ act_flag_args ~ semicolon }

act_flag_args = _{
    act_flag_arg_variable? ~ act_flag_arg_flags | act_flag_arg_flags
}

act_flag_arg_variable = { string }

act_flag_arg_flags = { (string | array) }

///
/// [Test](https://datatracker.ietf.org/doc/html/rfc5228#section-5)
///
test = {
    tst_not? ~ (
        tst_address  |
        tst_allof    |
        tst_anyof    |
        tst_envelope |
        tst_exists   |
        tst_false    |
        tst_header   |
        tst_size     |
        tst_true     |
        tst_notify   |
        tst_flag
    )
}

tst_address = {
    "address" ~ tst_address_part? ~ tst_address_operator ~ string ~ (string | array)
}

tst_address_part = {
    colon ~ ("all" | "localpart" | "domain" | "user" | "detail")
}

tst_address_operator = {
    colon ~ ("is" | "regex" | "contains" | "matches" | "count")
}

tst_allof = {
    "allof" ~ opening_paren ~ test ~ (comma ~ test)* ~ comma? ~ closing_paren
}

tst_anyof = {
    "anyof" ~ opening_paren ~ test ~ (comma ~ test)* ~ comma? ~ closing_paren
}

tst_envelope = {
    "envelope" ~ tst_envelope_part? ~ tst_envelope_operator ~ string ~ (string | array)
}

tst_envelope_part = { colon ~ ("all" | "localpart" | "domain" | "user" | "detail") }

tst_envelope_operator = { colon ~ ("is" | "regex" | "contains" | "matches" | "count") }

tst_exists = { "exists" ~ (string | array) }

tst_false = { false }

tst_header = { "header" ~ comparators ~ tst_header_arg_header ~ tst_header_arg_key }

tst_header_arg_header = { (string | array) }

tst_header_arg_key = { (string | array) }

tst_not = { "not" }

tst_size = { "size" ~ tst_size_arg ~ number ~ quantifier? }

tst_size_arg = { colon ~ ("over" | "under") }

tst_true = { true }

///
/// [Test:Notify](https://datatracker.ietf.org/doc/html/rfc5435)
///

tst_notify = _{ tst_valid_notify_method | tst_notify_method_capability }

tst_valid_notify_method = {
    "valid_notify_method" ~ tst_valid_notify_method_notification_uris ~ semicolon
}

tst_valid_notify_method_notification_uris = { array }

tst_notify_method_capability = {
    "notify_method_capability" ~
    comparators? ~
    tst_notify_method_capability_notification_uri ~
    tst_notify_method_capability_notification_capability ~
    tst_notify_method_capability_key ~
    semicolon
}

tst_notify_method_capability_notification_uri = { string }

tst_notify_method_capability_notification_capability = { string }

tst_notify_method_capability_key = { array }

///
/// [Test:Imap4flags](https://datatracker.ietf.org/doc/html/rfc5232)
///

tst_flag = _{ tst_has_flag }

tst_has_flag = {
    "hasflag" ~
    comparators? ~
    tst_has_flag_arg_variable? ~
    tst_has_flag_arg_flags
}

tst_has_flag_arg_variable = { (string | array) }

tst_has_flag_arg_flags = { (string | array) }

///
/// Base Types
///

/// Array of strings.
array = { opening_bracket ~ string ~ (comma ~ string)* ~ comma? ~ closing_bracket }

/// A quoted string.
inner_str = @{ (!(double_quote | "\\") ~ ANY)* ~ (escape ~ inner_str)? }

// /// An escaped or any character.
// inner_chr = @{ escape | ANY }

/// An escape sequence.
escape = @{ "\\" ~ ("\"" | "\\" | "r" | "n" | "t" | "0" | "'") }

/// Boolean
// boolean = @{ "true" | "false" }

/// Boolean true.
true = { "true" }

/// Boolean false.
false = { "false" }

/// Non-atomic rule prefix.
// non_atomic_modifier = { "not" }

/// An alpha character.
alpha = _{ 'a'..'z' | 'A'..'Z' }

/// An alphanumeric character.
alpha_num = _{ alpha | '0'..'9' }

/// A number.
number = @{ '0'..'9'+ }

/// An integer number (positive or negative).
integer = @{ number | "-" ~ "0"* ~ '1'..'9' ~ number? }

/// Quantifier.
quantifier = { "K" | "M" | "G" }

/// Opening parenthesis.
opening_paren = _{ "(" }

/// Closing parenthesis.
closing_paren = _{ ")" }

/// Opening bracket.
opening_bracket = _{ "[" }

/// Closing bracket.
closing_bracket = _{ "]" }

/// Opening brace.
opening_brace = _{ "{" }

/// Closing brace.
closing_brace = _{ "}" }

/// A double quote.
double_quote = _{ "\"" }

/// A single quote.
// single_quote = _{ "'" }

/// A comma.
comma = _{ "," }

/// A colon.
colon = _{ ":" }

/// A semicolon.
semicolon = _{ ";" }

/// A hashtag.
hashtag = _{ "#" }

/// A space character.
// space = _{ " " | "\t" }

/// A newline character.
newline = _{ "\n" | "\r\n" }
// NEWLINE

/// A whitespace character.
WHITESPACE = _{ " " | "\t" | newline }
